name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  determine_version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      version: ${{ steps.tag_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: "patch"

  build_and_push:
    needs: determine_version
    if: needs.determine_version.result == 'success' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            build_type: "release"
            tag_suffix: "amd64"
          - platform: linux/amd64
            runner: ubuntu-latest
            build_type: "debug"
            tag_suffix: "debug-amd64"
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            build_type: "release"
            tag_suffix: "arm64"
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            build_type: "debug"
            tag_suffix: "debug-arm64"
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,prefix=,suffix=-${{ matrix.tag_suffix }},enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=raw,value=latest-${{ matrix.tag_suffix }},enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=raw,value=${{ needs.determine_version.outputs.new_tag }}-${{ matrix.tag_suffix }},enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.determine_version.outputs.new_tag != '' }}
            type=ref,event=tag,suffix=-${{ matrix.tag_suffix }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          build-args: |
            BUILD_MODE=${{ matrix.build_type }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create_manifest:
    needs: [determine_version, build_and_push]
    if: needs.determine_version.result == 'success' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create and push manifests
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker buildx imagetools create \
              --tag ghcr.io/${{ github.repository }}:latest \
              ghcr.io/${{ github.repository }}:latest-amd64 \
              ghcr.io/${{ github.repository }}:latest-arm64
            docker buildx imagetools create \
              --tag ghcr.io/${{ github.repository }}:latest-debug \
              ghcr.io/${{ github.repository }}:latest-debug-amd64 \
              ghcr.io/${{ github.repository }}:latest-debug-arm64
            docker buildx imagetools create \
              --tag ghcr.io/${{ github.repository }}:${{ needs.determine_version.outputs.new_tag }} \
              ghcr.io/${{ github.repository }}:${{ needs.determine_version.outputs.new_tag }}-amd64 \
              ghcr.io/${{ github.repository }}:${{ needs.determine_version.outputs.new_tag }}-arm64
            docker buildx imagetools create \
              --tag ghcr.io/${{ github.repository }}:${{ needs.determine_version.outputs.new_tag }}-debug \
              ghcr.io/${{ github.repository }}:${{ needs.determine_version.outputs.new_tag }}-debug-amd64 \
              ghcr.io/${{ github.repository }}:${{ needs.determine_version.outputs.new_tag }}-debug-arm64
          else
            docker buildx imagetools create \
              --tag ghcr.io/${{ github.repository }}:${{ github.ref_name }} \
              ghcr.io/${{ github.repository }}:${{ github.ref_name }}-amd64 \
              ghcr.io/${{ github.repository }}:${{ github.ref_name }}-arm64
            docker buildx imagetools create \
              --tag ghcr.io/${{ github.repository }}:${{ github.ref_name }}-debug \
              ghcr.io/${{ github.repository }}:${{ github.ref_name }}-debug-amd64 \
              ghcr.io/${{ github.repository }}:${{ github.ref_name }}-debug-arm64
          fi
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Determine repository owner type
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER_TYPE=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }} \
            --jq '.owner.type')
          echo "OWNER_TYPE=${OWNER_TYPE}" >> $GITHUB_ENV
      - name: Delete architecture-specific tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PACKAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | cut -d'/' -f2)
          API_ENDPOINT=$([ "${{ env.OWNER_TYPE }}" = "User" ] && echo "/users/${{ github.repository_owner }}/packages/container/${PACKAGE_NAME}/versions" || echo "/orgs/${{ github.repository_owner }}/packages/container/${PACKAGE_NAME}/versions")
          VERSIONS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${API_ENDPOINT} \
            --jq '.[] | select(.metadata.container.tags[] | test("-(amd64|arm64)$")) | .id')
          for VERSION_ID in $VERSIONS; do
            echo "Deleting package version ${VERSION_ID}"
            gh api \
              -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              ${API_ENDPOINT}/${VERSION_ID} || echo "Failed to delete version ${VERSION_ID}, continuing..."
          done

  push_to_staging:
    needs: [create_manifest, determine_version]
    runs-on: ubuntu-latest
    if: vars.SPFFY_STAGE_APP_ID != ''
    steps:
      - name: Update container image on Magic Containers
        uses: BunnyWay/actions/container-update-image@main
        with:
          app_id: ${{ vars.SPFFY_STAGE_APP_ID }}
          api_key: ${{ secrets.BUNNYNET_API_KEY }}
          container: app
          image_tag: ${{ github.event_name == 'push' && needs.determine_version.outputs.new_tag || github.ref_name }}